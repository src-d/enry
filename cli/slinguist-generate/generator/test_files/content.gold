package slinguist

// CODE GENERATED AUTOMATICALLY WITH github.com/src-d/simple-linguist/cli/slinguist-generate
// THIS FILE SHOULD NOT BE EDITED BY HAND
// Extracted from github/linguist commit: fe8b44ab8a225b1ffa75b983b916ea22fee5b6f7

import (
	"path/filepath"
	"regexp"
	"strings"
)

func GetLanguageByContent(filename string, content []byte) (lang string, safe bool) {
	ext := strings.ToLower(filepath.Ext(filename))
	if fnMatcher, ok := matchers[ext]; ok {
		lang, safe = fnMatcher(content)
		return
	}

	return GetLanguageByExtension(filename)
}

type languageMatcher func ([]byte) (string, bool)

var matchers = map[string]languageMatcher{
	".asc": func(i []byte) (string, bool) {
		if asc_PublicKey_Matcher_0.Match(i) {
			return "Public Key", true
		} else if asc_AsciiDoc_Matcher_0.Match(i) {
			return "AsciiDoc", true
		} else if asc_AGSScript_Matcher_0.Match(i) {
			return "AGS Script", true
		}
	
		return OtherLanguage, false
	},
	".ms": func(i []byte) (string, bool) {
		if ms_Groff_Matcher_0.Match(i) {
			return "Groff", true
		}
	
		return "MAXScript", true
	},
	".mod": func(i []byte) (string, bool) {
		if mod_XML_Matcher_0.Match(i) {
			return "XML", true
		} else if mod_ModulaDash2_Matcher_0.Match(i) || mod_ModulaDash2_Matcher_1.Match(i) {
			return "Modula-2", true
		}
	
		return "Linux Kernel Module", true
	},
	".pro": func(i []byte) (string, bool) {
		if pro_Prolog_Matcher_0.Match(i) {
			return "Prolog", true
		} else if pro_INI_Matcher_0.Match(i) {
			return "INI", true
		} else if pro_QMake_Matcher_0.Match(i) && pro_QMake_Matcher_1.Match(i) {
			return "QMake", true
		} else if pro_IDL_Matcher_0.Match(i) {
			return "IDL", true
		}
	
		return OtherLanguage, false
	},
	}

var (
    asc_PublicKey_Matcher_0 = regexp.MustCompile(`(?m)^(----[- ]BEGIN|ssh-(rsa|dss)) `)
    asc_AsciiDoc_Matcher_0 = regexp.MustCompile(`(?m)^[=-]+(\s|\n)|{{[A-Za-z]`)
    asc_AGSScript_Matcher_0 = regexp.MustCompile(`(?m)^(\/\/.+|((import|export)\s+)?(function|int|float|char)\s+((room|repeatedly|on|game)_)?([A-Za-z]+[A-Za-z_0-9]+)\s*[;\(])`)
    ms_Groff_Matcher_0 = regexp.MustCompile(`(?mi)^[.'][a-z][a-z](\s|$)`)
    mod_XML_Matcher_0 = regexp.MustCompile(`(?m)<!ENTITY `)
    mod_ModulaDash2_Matcher_0 = regexp.MustCompile(`(?mi)^\s*MODULE [\w\.]+;`)
    mod_ModulaDash2_Matcher_1 = regexp.MustCompile(`(?mi)^\s*END [\w\.]+;`)
    pro_Prolog_Matcher_0 = regexp.MustCompile(`(?m)^[^#]+:-`)
    pro_INI_Matcher_0 = regexp.MustCompile(`(?m)last_client=`)
    pro_QMake_Matcher_0 = regexp.MustCompile(`(?m)HEADERS`)
    pro_QMake_Matcher_1 = regexp.MustCompile(`(?m)SOURCES`)
    pro_IDL_Matcher_0 = regexp.MustCompile(`(?m)^\s*function[ \w,]+$`)
    )